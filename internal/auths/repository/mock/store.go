// Code generated by MockGen. DO NOT EDIT.
// Source: go-invoice/internal/invoice/repository (interfaces: InvoiceRepository)
//
// Generated by this command:
//
//	mockgen -package mockInvoice -destination internal/auths/repository/mock/store.go go-invoice/internal/invoice/repository InvoiceRepository
//

// Package mockInvoice is a generated GoMock package.
package mockInvoice

import (
	domain "go-invoice/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInvoiceRepository is a mock of InvoiceRepository interface.
type MockInvoiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceRepositoryMockRecorder
}

// MockInvoiceRepositoryMockRecorder is the mock recorder for MockInvoiceRepository.
type MockInvoiceRepositoryMockRecorder struct {
	mock *MockInvoiceRepository
}

// NewMockInvoiceRepository creates a new mock instance.
func NewMockInvoiceRepository(ctrl *gomock.Controller) *MockInvoiceRepository {
	mock := &MockInvoiceRepository{ctrl: ctrl}
	mock.recorder = &MockInvoiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceRepository) EXPECT() *MockInvoiceRepositoryMockRecorder {
	return m.recorder
}

// CreateInvoiceWithItems mocks base method.
func (m *MockInvoiceRepository) CreateInvoiceWithItems(arg0 domain.CreateInvoiceRequestDTO) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceWithItems", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoiceWithItems indicates an expected call of CreateInvoiceWithItems.
func (mr *MockInvoiceRepositoryMockRecorder) CreateInvoiceWithItems(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceWithItems", reflect.TypeOf((*MockInvoiceRepository)(nil).CreateInvoiceWithItems), arg0)
}

// DeleteInvoiceItems mocks base method.
func (m *MockInvoiceRepository) DeleteInvoiceItems(arg0 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvoiceItems", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvoiceItems indicates an expected call of DeleteInvoiceItems.
func (mr *MockInvoiceRepositoryMockRecorder) DeleteInvoiceItems(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoiceItems", reflect.TypeOf((*MockInvoiceRepository)(nil).DeleteInvoiceItems), arg0)
}

// FetchInvoiceStats mocks base method.
func (m *MockInvoiceRepository) FetchInvoiceStats(arg0 int) (map[string]domain.InvoiceStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInvoiceStats", arg0)
	ret0, _ := ret[0].(map[string]domain.InvoiceStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchInvoiceStats indicates an expected call of FetchInvoiceStats.
func (mr *MockInvoiceRepositoryMockRecorder) FetchInvoiceStats(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInvoiceStats", reflect.TypeOf((*MockInvoiceRepository)(nil).FetchInvoiceStats), arg0)
}

// FetchInvoiceWithItems mocks base method.
func (m *MockInvoiceRepository) FetchInvoiceWithItems(arg0 int) (domain.InvoiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInvoiceWithItems", arg0)
	ret0, _ := ret[0].(domain.InvoiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchInvoiceWithItems indicates an expected call of FetchInvoiceWithItems.
func (mr *MockInvoiceRepositoryMockRecorder) FetchInvoiceWithItems(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInvoiceWithItems", reflect.TypeOf((*MockInvoiceRepository)(nil).FetchInvoiceWithItems), arg0)
}

// FetchInvoices mocks base method.
func (m *MockInvoiceRepository) FetchInvoices(arg0 int, arg1, arg2 int64) ([]domain.InvoiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInvoices", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.InvoiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchInvoices indicates an expected call of FetchInvoices.
func (mr *MockInvoiceRepositoryMockRecorder) FetchInvoices(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInvoices", reflect.TypeOf((*MockInvoiceRepository)(nil).FetchInvoices), arg0, arg1, arg2)
}

// FetchInvoicesWithItems mocks base method.
func (m *MockInvoiceRepository) FetchInvoicesWithItems(arg0 int, arg1, arg2 int64) ([]domain.InvoiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInvoicesWithItems", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.InvoiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchInvoicesWithItems indicates an expected call of FetchInvoicesWithItems.
func (mr *MockInvoiceRepositoryMockRecorder) FetchInvoicesWithItems(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInvoicesWithItems", reflect.TypeOf((*MockInvoiceRepository)(nil).FetchInvoicesWithItems), arg0, arg1, arg2)
}

// UpdateInvoiceStatus mocks base method.
func (m *MockInvoiceRepository) UpdateInvoiceStatus(arg0, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvoiceStatus indicates an expected call of UpdateInvoiceStatus.
func (mr *MockInvoiceRepositoryMockRecorder) UpdateInvoiceStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceStatus", reflect.TypeOf((*MockInvoiceRepository)(nil).UpdateInvoiceStatus), arg0, arg1, arg2)
}
