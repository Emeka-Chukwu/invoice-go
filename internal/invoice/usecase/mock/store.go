// Code generated by MockGen. DO NOT EDIT.
// Source: go-invoice/internal/invoice/usecase (interfaces: InvoiceUsecase)
//
// Generated by this command:
//
//	mockgen -package mockInvoiceUse -destination internal/invoice/usecase/mock/store.go go-invoice/internal/invoice/usecase InvoiceUsecase
//

// Package mockInvoiceUse is a generated GoMock package.
package mockInvoiceUse

import (
	domain "go-invoice/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInvoiceUsecase is a mock of InvoiceUsecase interface.
type MockInvoiceUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceUsecaseMockRecorder
}

// MockInvoiceUsecaseMockRecorder is the mock recorder for MockInvoiceUsecase.
type MockInvoiceUsecaseMockRecorder struct {
	mock *MockInvoiceUsecase
}

// NewMockInvoiceUsecase creates a new mock instance.
func NewMockInvoiceUsecase(ctrl *gomock.Controller) *MockInvoiceUsecase {
	mock := &MockInvoiceUsecase{ctrl: ctrl}
	mock.recorder = &MockInvoiceUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceUsecase) EXPECT() *MockInvoiceUsecaseMockRecorder {
	return m.recorder
}

// CreateInvoiceWithItems mocks base method.
func (m *MockInvoiceUsecase) CreateInvoiceWithItems(arg0 domain.CreateInvoiceRequestDTO) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceWithItems", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateInvoiceWithItems indicates an expected call of CreateInvoiceWithItems.
func (mr *MockInvoiceUsecaseMockRecorder) CreateInvoiceWithItems(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceWithItems", reflect.TypeOf((*MockInvoiceUsecase)(nil).CreateInvoiceWithItems), arg0)
}

// DeleteInvoiceItems mocks base method.
func (m *MockInvoiceUsecase) DeleteInvoiceItems(arg0 []int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvoiceItems", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvoiceItems indicates an expected call of DeleteInvoiceItems.
func (mr *MockInvoiceUsecaseMockRecorder) DeleteInvoiceItems(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoiceItems", reflect.TypeOf((*MockInvoiceUsecase)(nil).DeleteInvoiceItems), arg0)
}

// DownloadSingleInvoice mocks base method.
func (m *MockInvoiceUsecase) DownloadSingleInvoice(arg0, arg1, arg2 int) (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadSingleInvoice", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadSingleInvoice indicates an expected call of DownloadSingleInvoice.
func (mr *MockInvoiceUsecaseMockRecorder) DownloadSingleInvoice(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadSingleInvoice", reflect.TypeOf((*MockInvoiceUsecase)(nil).DownloadSingleInvoice), arg0, arg1, arg2)
}

// FetchInvoiceStats mocks base method.
func (m *MockInvoiceUsecase) FetchInvoiceStats(arg0 int) (int, map[string]domain.InvoiceStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInvoiceStats", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]domain.InvoiceStats)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchInvoiceStats indicates an expected call of FetchInvoiceStats.
func (mr *MockInvoiceUsecaseMockRecorder) FetchInvoiceStats(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInvoiceStats", reflect.TypeOf((*MockInvoiceUsecase)(nil).FetchInvoiceStats), arg0)
}

// FetchInvoiceWithItems mocks base method.
func (m *MockInvoiceUsecase) FetchInvoiceWithItems(arg0, arg1 int) (int, domain.InvoiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInvoiceWithItems", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(domain.InvoiceResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchInvoiceWithItems indicates an expected call of FetchInvoiceWithItems.
func (mr *MockInvoiceUsecaseMockRecorder) FetchInvoiceWithItems(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInvoiceWithItems", reflect.TypeOf((*MockInvoiceUsecase)(nil).FetchInvoiceWithItems), arg0, arg1)
}

// FetchInvoices mocks base method.
func (m *MockInvoiceUsecase) FetchInvoices(arg0 int, arg1, arg2 int64) (int, []domain.InvoiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInvoices", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]domain.InvoiceResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchInvoices indicates an expected call of FetchInvoices.
func (mr *MockInvoiceUsecaseMockRecorder) FetchInvoices(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInvoices", reflect.TypeOf((*MockInvoiceUsecase)(nil).FetchInvoices), arg0, arg1, arg2)
}

// FetchInvoicesWithItems mocks base method.
func (m *MockInvoiceUsecase) FetchInvoicesWithItems(arg0 int, arg1, arg2 int64) (int, []domain.InvoiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInvoicesWithItems", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]domain.InvoiceResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchInvoicesWithItems indicates an expected call of FetchInvoicesWithItems.
func (mr *MockInvoiceUsecaseMockRecorder) FetchInvoicesWithItems(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInvoicesWithItems", reflect.TypeOf((*MockInvoiceUsecase)(nil).FetchInvoicesWithItems), arg0, arg1, arg2)
}

// GenerateInvoicePDF mocks base method.
func (m *MockInvoiceUsecase) GenerateInvoicePDF() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateInvoicePDF")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateInvoicePDF indicates an expected call of GenerateInvoicePDF.
func (mr *MockInvoiceUsecaseMockRecorder) GenerateInvoicePDF() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateInvoicePDF", reflect.TypeOf((*MockInvoiceUsecase)(nil).GenerateInvoicePDF))
}

// GetPagination mocks base method.
func (m *MockInvoiceUsecase) GetPagination(arg0 domain.PaginationDTO) domain.PaginationDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPagination", arg0)
	ret0, _ := ret[0].(domain.PaginationDTO)
	return ret0
}

// GetPagination indicates an expected call of GetPagination.
func (mr *MockInvoiceUsecaseMockRecorder) GetPagination(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPagination", reflect.TypeOf((*MockInvoiceUsecase)(nil).GetPagination), arg0)
}

// UpdateInvoiceStatus mocks base method.
func (m *MockInvoiceUsecase) UpdateInvoiceStatus(arg0 string, arg1, arg2 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceStatus indicates an expected call of UpdateInvoiceStatus.
func (mr *MockInvoiceUsecaseMockRecorder) UpdateInvoiceStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceStatus", reflect.TypeOf((*MockInvoiceUsecase)(nil).UpdateInvoiceStatus), arg0, arg1, arg2)
}
